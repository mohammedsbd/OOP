package service;

import model.Booking;
import model.Driver;
import dao.BookingDAO;
import dao.DriverDAO;
import java.time.LocalDateTime;
import java.util.List;

public class BookingService {
    private BookingDAO bookingDAO;
    private DriverDAO driverDAO;
    
    public BookingService() {
        this.bookingDAO = new BookingDAO();
        this.driverDAO = new DriverDAO();
    }
    
    public Booking createBooking(int customerId, String pickupLocation, 
                               String dropLocation, double fare) {
        // Find an available driver
        List<Driver> availableDrivers = driverDAO.getAvailableDrivers();
        if (availableDrivers.isEmpty()) {
            System.out.println("No available drivers at the moment");
            return null;
        }
        
        // For simplicity, just pick the first available driver
        Driver driver = availableDrivers.get(0);
        
        Booking booking = new Booking(
            0, // bookingId will be generated by database
            customerId,
            driver.getId(),
            pickupLocation,
            dropLocation,
            LocalDateTime.now(),
            fare,
            "Pending"
        );
        
        if (bookingDAO.addBooking(booking)) {
            // Mark driver as unavailable
            driver.setAvailable(false);
            driverDAO.updateDriver(driver);
            
            return booking;
        }
        return null;
    }
    
    public boolean cancelBooking(int bookingId) {
        Booking booking = bookingDAO.getBookingById(bookingId);
        if (booking == null) {
            return false;
        }
        
        if (bookingDAO.cancelBooking(bookingId)) {
            // Mark driver as available again
            Driver driver = driverDAO.getDriverById(booking.getDriverId());
            if (driver != null) {
                driver.setAvailable(true);
                driverDAO.updateDriver(driver);
            }
            return true;
        }
        return false;
    }
    
    public boolean completeBooking(int bookingId) {
        Booking booking = bookingDAO.getBookingById(bookingId);
        if (booking == null) {
            return false;
        }
        
        if (bookingDAO.completeBooking(bookingId)) {
            // Mark driver as available again
            Driver driver = driverDAO.getDriverById(booking.getDriverId());
            if (driver != null) {
                driver.setAvailable(true);
                driverDAO.updateDriver(driver);
            }
            return true;
        }
        return false;
    }
    
    public List<Booking> getCustomerBookings(int customerId) {
        return bookingDAO.getBookingsByCustomer(customerId);
    }
    
    public List<Booking> getDriverBookings(int driverId) {
        return bookingDAO.getBookingsByDriver(driverId);
    }
    
    public List<Booking> getAllBookings() {
        return bookingDAO.getAllBookings();
    }
    
    public Booking getBookingById(int bookingId) {
        return bookingDAO.getBookingById(bookingId);
    }
}